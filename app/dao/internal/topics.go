// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// TopicsDao is the manager for logic model data accessing and custom defined data operations functions management.
type TopicsDao struct {
	Table   string        // Table is the underlying table name of the DAO.
	Group   string        // Group is the database configuration group name of current DAO.
	Columns TopicsColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// TopicsColumns defines and stores column names for table topics.
type TopicsColumns struct {
	Id              string //
	Title           string //
	Body            string //
	UserId          string //
	CategoryId      string //
	ReplyCount      string //
	ViewCount       string //
	LastReplyUserId string //
	Order           string //
	Excerpt         string //
	Slug            string //
}

//  topicsColumns holds the columns for table topics.
var topicsColumns = TopicsColumns{
	Id:              "id",
	Title:           "title",
	Body:            "body",
	UserId:          "user_id",
	CategoryId:      "category_id",
	ReplyCount:      "reply_count",
	ViewCount:       "view_count",
	LastReplyUserId: "last_reply_user_id",
	Order:           "order",
	Excerpt:         "excerpt",
	Slug:            "slug",
}

// NewTopicsDao creates and returns a new DAO object for table data access.
func NewTopicsDao() *TopicsDao {
	return &TopicsDao{
		Group:   "default",
		Table:   "topics",
		Columns: topicsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *TopicsDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *TopicsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *TopicsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
